{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Text","props","state","id","match","params","data","showInfo","Data","window","localStorage","getItem","JSON","parse","this","setState","className","title","sourceWebName","startDate","endDate","location","descriptionFilterHtml","Component","AllPosts","require","default","get","then","res","prevProps","prevState","setItem","stringify","style","color","map","item","index","to","About","Navpage","padding","App","path","component","exact","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0994734e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {HashRouter, Route, Switch, Link} from \"react-router-dom\";\nimport './App.css';\n\nclass Text extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        id: this.props.match.params.id,\n        data: [],\n        showInfo: [],\n     };\n  }\n  componentDidMount() {\n    const Data = window.localStorage.getItem(\"data\");\n    const data = JSON.parse(Data);\n    this.setState({\n      data: data[this.state.id],\n      showInfo: data[this.state.id].showInfo[0]\n    })\n  }\n  render () {\n    const {data, showInfo} = this.state;\n    return (\n      <div className=\"mainpage\">\n        <table className=\"table table-bordered\">\n          <thead>\n            <tr>\n              <th>活動名稱: <span className=\"tabletext\">{data.title}</span></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th>來源網站名稱: <span className=\"tabletext\">{data.sourceWebName}</span></th>\n            </tr>\n            <tr>\n              <th>開始日期: <span className=\"tabletext\">{data.startDate}</span></th>\n            </tr>\n            <tr>\n              <th>結束日期: <span className=\"tabletext\">{data.endDate}</span></th>\n            </tr>\n            <tr>\n              <th>地點: <span className=\"tabletext\">{showInfo.location}</span></th>\n            </tr>\n            <tr>\n              <th>介紹: <p className=\"tabletext\">{data.descriptionFilterHtml}</p></th>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nclass AllPosts extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      data: [],\n    }\n  }\n  componentDidMount() {\n    if (window.localStorage.getItem(\"data\") === null) {\n      const axios = require('axios').default;\n      axios.get(\"https://cloud.culture.tw/frontsite/trans/SearchShowAction.do?method=doFindTypeJ&category=6\")\n        .then(res => {\n           this.setState({\n             data: res.data,\n           })\n        })\n    } else {\n        const Data = window.localStorage.getItem(\"data\");\n        const data = JSON.parse(Data);\n        this.setState({\n          data: data,\n        })\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.data !== this.state.data) {\n      window.localStorage.setItem('data',\n        JSON.stringify(this.state.data));\n    }\n  }\n  render() {\n    const {data} = this.state;\n    const style = {\n      color: `Black`\n    }\n    return (\n      <div className=\"mainpage\">\n        <h2>所有展覽</h2>\n        <table className=\"table table-bordered\">\n          <thead>\n            <tr>\n              <th>活動名稱</th>\n            </tr>\n          </thead>\n          <tbody>\n          {\n            data.map((item, index) => (\n              <tr>\n                <td>\n                  <Link to={`/Posts/${index}`} style={style}>{item.title}</Link>\n                </td>\n              </tr>\n            ))\n          }\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nconst About = () => {\n  return (\n    <div className=\"mainpage\">\n      <h2 className=\"about_title\">關於本站</h2>\n      <div className=\"about_content\">\n        本站利用 React.js + React-router 進行前端的畫面渲染和頁面路徑設定，資料方面則使用\n        axios 串接政府資料開放平台的 API。 資料集是文化部整合本部及所屬各級機關(構)、以及其他公、民營單位的展覽資訊。[註: 本網站僅作為 demo 用途!]\n      </div>\n    </div>\n  )\n}\n\nclass Navpage extends Component {\n  render() {\n    const style = {\n      color: `Black`\n    }\n    const nav = {\n      padding: `10px`\n    }\n    return (\n      <nav className=\"nav navbar-light bg-light\" style={nav}>\n        <span className=\"navbar-brand mb-0 h1\">展覽資訊</span>\n        <Link to=\"/Posts\" className=\"nav-item nav-link\" style={style}>活動名稱</Link>\n        <Link to=\"/About\" className=\"nav-item nav-link\" style={style}>關於本站</Link>\n      </nav>\n    )\n  }\n}\n\nconst App = () => {\n    return (\n      <HashRouter>\n        <Navpage/>\n        <Switch>\n          <Route path=\"/About\" component={About}/>\n          <Route exact path=\"/Posts\" component={AllPosts}/>\n          <Route path=\"/Posts/:id\" component={Text}/>\n        </Switch>\n      </HashRouter>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}